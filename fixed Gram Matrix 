{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ProteinsDistanceGeometry.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "toc_visible": true,
      "authorship_tag": "ABX9TyNwWAnxFgWgfsI1TvQ5PjHL",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/NikolasGialitsis/ProteinsDistanceGeometry/blob/master/fixed%20Gram%20Matrix%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "po_4-2B8-TkF",
        "colab_type": "text"
      },
      "source": [
        "## PDB coords extraction"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3aZht7Pd-QjV",
        "colab_type": "code",
        "outputId": "aa00a421-1a3c-43a6-8eed-29477f12eece",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "Xtrain_coords = []\n",
        "model_num = 1\n",
        "molecules = ['1uwc.pdb','6fat.pdb']\n",
        "mol_array = []\n",
        "for mol in molecules:\n",
        "  print('Get coords for molecule ',mol)\n",
        "  array = []\n",
        "  with open(mol) as pdbfile:\n",
        "      for line in pdbfile:\n",
        "          #print(line)\n",
        "          if line[:5] == 'MODEL':\n",
        "            print('Parsing  Molecule '+str(model_num))\n",
        "            model_num = model_num + 1\n",
        "            mol1 = []\n",
        "          elif line[:4] == 'ATOM':\n",
        "              #print(line)\n",
        "              # Split the line\n",
        "              x_list = line[30:38]\n",
        "              y_list = line[38:46]\n",
        "              z_list = line[46:54]\n",
        "\n",
        "              x_str = ' '.join([str(elem) for elem in x_list]) \n",
        "              y_str = ' '.join([str(elem) for elem in y_list]) \n",
        "              z_str = ' '.join([str(elem) for elem in z_list]) \n",
        "              \n",
        "              x_str_no_space = x_str.replace(\" \", \"\")\n",
        "              y_str_no_space = y_str.replace(\" \", \"\")\n",
        "              z_str_no_space = z_str.replace(\" \", \"\")\n",
        "\n",
        "              x_float = float(x_str_no_space)\n",
        "              y_float = float(y_str_no_space)\n",
        "              z_float = float(z_str_no_space)\n",
        "\n",
        "              array.append((x_float,y_float,z_float))\n",
        "      mol_array.append(array)   \n",
        "      #print('x = '+str(x_float),'y = '+str(y_float), 'z = ' + str(z_float))\n"
      ],
      "execution_count": 272,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Get coords for molecule  1uwc.pdb\n",
            "Get coords for molecule  6fat.pdb\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vXZUX6NU_Jgh",
        "colab_type": "text"
      },
      "source": [
        "## Calculate c-RMSD"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z1Hz4h01_G5q",
        "colab_type": "code",
        "outputId": "695881c8-2d93-461c-a3ec-cbe8466db713",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 54
        }
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "\n",
        "\n",
        "def euclidean_norm_power2(a,b):\n",
        "  dim = len(a)\n",
        "  assert(dim > 0)\n",
        "  assert(dim == len(b))\n",
        "  sum_sqrts = 0\n",
        "  for d in range(dim):\n",
        "    sum_sqrts += ((a[d] - b[d])*(a[d] - b[d]))\n",
        "  assert(sum_sqrts >= 0)\n",
        "  return sum_sqrts\n",
        "\n",
        "def cRMSD(listX,listY):\n",
        "  assert(len(listX) == len(listY))\n",
        "  n = len(listX)\n",
        "  assert(n > 0)\n",
        "  sum_atoms = 0\n",
        "  for ident in range(n):\n",
        "    x = listX[ident]\n",
        "    y = listY[ident]\n",
        "    sum_atoms += euclidean_norm_power2(x,y)\n",
        "  \n",
        "  return np.sqrt(sum_atoms/n)\n",
        "\n",
        "def getCentroid(atomsList):\n",
        "  sum_atoms = []\n",
        "  n = len(atomsList)\n",
        "  dims = len(atomsList[0])\n",
        "  for dim in range(dims):\n",
        "    sum_atoms.append(np.array([atom[dim] for atom in atomsList]).sum()/n)\n",
        "  return sum_atoms\n",
        "\n",
        "def translateOrigin(atomsList):\n",
        "  centroid = getCentroid(atomsList)\n",
        "  for x in atomsList:\n",
        "    for d in range(len(x)):\n",
        "      x[d] -= centroid[d]\n",
        "\n",
        "def GetImproved_cRMSD(X,Y):\n",
        "  translateOrigin(X)\n",
        "  translateOrigin(Y)\n",
        "  XY = np.matmul(X.transpose(),Y)\n",
        "  SVD = np.linalg.svd(XY)\n",
        "\n",
        "  U = SVD[0]\n",
        "  Sigma = SVD[1]\n",
        "  V = SVD[2]\n",
        "  print('============ U ============')\n",
        "  print(U)\n",
        "  print('============ Î£ ============')\n",
        "  print(Sigma)\n",
        "  print('============ V ============')\n",
        "  print(V)\n",
        "  #assert(U.shape == (3 , 3))\n",
        "  #assert(Sigma.shape == (3,))\n",
        "  #assert(V.shape == (3 , 3))\n",
        "  Q = np.matmul(U,V)\n",
        "\n",
        "  detQ = np.linalg.det(Q)\n",
        "  if detQ < 0:\n",
        "    U[2] = -U[2]\n",
        "    Q = np.matmul(U,V)\n",
        "    detQ = np.linalg.det(Q)\n",
        "    assert(detQ >= 0)\n",
        "  print('============ Q ============')\n",
        "  print(Q)\n",
        "\n",
        "  XQ = np.matmul(X,Q)\n",
        "  final = cRMSD(XQ,Y)\n",
        "  assert(final != float(\"inf\"))\n",
        "  assert(final != float(\"-inf\"))\n",
        "  assert(final >= 0)\n",
        "  return final\n",
        "\n",
        "\n",
        "print(len(mol_array[0]))\n",
        "print(len(mol_array[1]))\n",
        "#out = GetImproved_cRMSD(np.array(mol_array[0]),np.array(mol_array[1]))\n",
        "#print('\\n====================================\\nFINAL cRMSD SCORE = ',out)\n",
        "#print('====================================')\n",
        "\n"
      ],
      "execution_count": 275,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "4114\n",
            "7913\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fvhCEeP1wwFa",
        "colab_type": "text"
      },
      "source": [
        "## (C) construct Cayley-Menger (border) matrix B\n",
        "Select 3 residues at the calcium binding site namely Val276-Ala277-Asp278 in the 3D\n",
        "structure of Feruloyl esterase with PDB code 6FAT. Consider only their 3 backbone atoms\n",
        "(smallest indices) namely atoms N, Ca, C of each, as points with 3D coordinates. Construct\n",
        "the corresponding Cayley-Menger (border) matrix B of dimension 10x10."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "fIMyp9xa4GU4",
        "colab_type": "code",
        "outputId": "4a0fb43b-210d-4c1b-9c0b-4224b8c7352d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 55
        }
      },
      "source": [
        "with open('atom_coords.txt',mode='r',encoding='utf-8-sig') as f:\n",
        "  data = f.readlines()\n",
        "atoms = []\n",
        "for line in data:\n",
        "  x,y,z = line.split()\n",
        "  atoms.append( (float(x),float(y),float(z)))\n",
        "print(atoms)"
      ],
      "execution_count": 276,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[(19.456, 43.867, 53.82), (19.12, 44.932, 52.867), (19.18, 46.289, 53.576), (20.251, 47.037, 53.302), (20.462, 48.366, 53.881), (19.599, 49.411, 53.172), (18.326, 49.468, 53.563), (17.345, 50.411, 52.999), (16.733, 51.352, 54.051)]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "FhZ2mNnNw2dr",
        "colab_type": "code",
        "outputId": "a9d3a1a2-ac98-40c4-81d0-441d4dc35462",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 199
        }
      },
      "source": [
        "import numpy as np\n",
        "def BorderMatrix(atoms):\n",
        "  num_atoms = len(atoms)\n",
        "  array = -1 * np.ones(shape=(num_atoms+1,num_atoms+1))\n",
        "  #print(array)\n",
        "  for row in range(num_atoms+1):\n",
        "    for col in range(num_atoms+1):\n",
        "      if row == col:\n",
        "        array[row,col] = 0\n",
        "      elif row == 0 or col == 0:\n",
        "        array[row,col] = 1 \n",
        "      elif array[col,row] == -1:\n",
        "        p1 = atoms[row-1]\n",
        "        p2 = atoms[col-1]\n",
        "        array[row,col] =  array[col,row] = 0.5* euclidean_norm_power2(p1,p2)\n",
        "        \n",
        "  assert(array.all() >= 0)\n",
        "  return array\n",
        "\n",
        "B = BorderMatrix(atoms)\n",
        "for line in B.round(1):\n",
        "  print(line)\n"
      ],
      "execution_count": 277,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[0. 1. 1. 1. 1. 1. 1. 1. 1. 1.]\n",
            "[ 1.   0.   1.1  3.   5.5 10.6 15.6 16.4 24.  31.7]\n",
            "[ 1.   1.1  0.   1.2  2.9  7.3 10.2 10.8 16.6 24.2]\n",
            "[ 1.   3.   1.2  0.   0.9  3.   5.   5.4 10.3 15.9]\n",
            "[ 1.   5.5  2.9  0.9  0.   1.1  3.   4.8 10.  15.8]\n",
            "[ 1.  10.6  7.3  3.   1.1  0.   1.2  2.9  7.3 11.4]\n",
            "[ 1.  15.6 10.2  5.   3.   1.2  0.   0.9  3.1  6.4]\n",
            "[ 1.  16.4 10.8  5.4  4.8  2.9  0.9  0.   1.1  3.2]\n",
            "[ 1.  24.  16.6 10.3 10.   7.3  3.1  1.1  0.   1.2]\n",
            "[ 1.  31.7 24.2 15.9 15.8 11.4  6.4  3.2  1.2  0. ]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VIgrd_jG-REx",
        "colab_type": "text"
      },
      "source": [
        "## D) Gram Matrix, SVD\n",
        " Check that rank(B)=5. Compute the Gram matrix G, and its SVD so as to get 3D point\n",
        "coordinates. Check if it is the same structure, by computing its c-RMSD to (c).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AgqNNvTG-kfn",
        "colab_type": "code",
        "outputId": "cb15b209-d7af-41b7-fe23-ba0ad9e574db",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        }
      },
      "source": [
        "rank = np.linalg.matrix_rank(B)\n",
        "print('Border Matrix Rank = ',rank)\n",
        "assert(rank==5)"
      ],
      "execution_count": 278,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Border Matrix Rank =  5\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "z0RHT5oD-lc6",
        "colab_type": "code",
        "outputId": "311010e7-6c58-423f-8573-34fa14674490",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 181
        }
      },
      "source": [
        "import numpy as np\n",
        "\n",
        "def GramMatrix(atoms):\n",
        "  \n",
        "  G = np.zeros(shape=(len(atoms),len(atoms)))\n",
        "  atoms[5] = (0,0,0)\n",
        "  for i in range(len(atoms)):\n",
        "    for j in range(len(atoms)):\n",
        "      G[i,j] = G[j,i] = B[i+1,5] - B[i+1,j+1] + B[j+1,5]\n",
        "  return G\n",
        "\n",
        "#atoms[5] = (0,0,0)\n",
        "G =  GramMatrix(atoms.copy())\n",
        "print(G.round(1))\n",
        "\n"
      ],
      "execution_count": 279,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[21.3 16.9 10.7  6.2  0.  -3.8 -2.8 -6.  -9.7]\n",
            " [16.9 14.6  9.2  5.4  0.  -1.7 -0.6 -1.9 -5.4]\n",
            " [10.7  9.2  6.1  3.2  0.  -0.8  0.5  0.  -1.5]\n",
            " [ 6.2  5.4  3.2  2.1  0.  -0.8 -0.8 -1.5 -3.3]\n",
            " [ 0.   0.   0.   0.   0.   0.   0.   0.   0. ]\n",
            " [-3.8 -1.7 -0.8 -0.8  0.   2.3  3.2  5.5  6.2]\n",
            " [-2.8 -0.6  0.5 -0.8  0.   3.2  5.9  9.2 11.2]\n",
            " [-6.  -1.9  0.  -1.5  0.   5.5  9.2 14.7 17.6]\n",
            " [-9.7 -5.4 -1.5 -3.3  0.   6.2 11.2 17.6 22.9]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "NJEAyIbEqmlR",
        "colab_type": "text"
      },
      "source": [
        " Check if it is the same structure, by computing its c-RMSD to (c).\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "srJSDr0-cUZ1",
        "colab_type": "code",
        "outputId": "8edef550-0a09-45d6-9dab-a1a8ad6d919e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        }
      },
      "source": [
        "U,Sigma,V = np.linalg.svd(G)\n",
        "Sigma[3:] = 0\n",
        "Sigma = np.sqrt(np.array(Sigma))\n",
        "V = np.array(V)\n",
        "P = Sigma*V.transpose()\n",
        "print(P.round(1))\n",
        "P = P[:,:3]\n",
        "\n",
        "print('Rank of P = ',\\\n",
        "      np.linalg.matrix_rank(P))\n",
        "\n",
        "A = np.zeros(shape=(len(atoms),len(atoms[0])))\n",
        "print(atoms)\n",
        "for i in range(len(atoms)):\n",
        "  A[i,0],A[i,1],A[i,2] = atoms[i] \n",
        "\n",
        "print(GetImproved_cRMSD(P,A).round(1))"
      ],
      "execution_count": 280,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[-3.9 -2.4 -0.5 -0.   0.   0.  -0.   0.  -0. ]\n",
            " [-2.8 -2.6  0.5  0.   0.  -0.   0.  -0.   0. ]\n",
            " [-1.5 -1.9 -0.1 -0.  -0.   0.   0.  -0.   0. ]\n",
            " [-1.2 -0.8  0.4  0.  -0.   0.  -0.  -0.  -0. ]\n",
            " [ 0.   0.   0.   0.   0.  -0.  -0.  -0.   0. ]\n",
            " [ 1.3 -0.6  0.6  0.  -0.   0.  -0.   0.   0. ]\n",
            " [ 1.8 -1.7  0.  -0.  -0.  -0.  -0.   0.   0. ]\n",
            " [ 3.  -2.4  0.5 -0.   0.   0.   0.  -0.  -0. ]\n",
            " [ 4.1 -2.4 -0.6  0.  -0.  -0.  -0.  -0.  -0. ]]\n",
            "Rank of P =  3\n",
            "[(19.456, 43.867, 53.82), (19.12, 44.932, 52.867), (19.18, 46.289, 53.576), (20.251, 47.037, 53.302), (20.462, 48.366, 53.881), (19.599, 49.411, 53.172), (18.326, 49.468, 53.563), (17.345, 50.411, 52.999), (16.733, 51.352, 54.051)]\n",
            "============ U ============\n",
            "[[-9.99665499e-01  2.52653172e-02  5.52747117e-03]\n",
            " [-2.58565708e-02 -9.81054088e-01 -1.92000820e-01]\n",
            " [ 5.71786548e-04 -1.92079517e-01  9.81379199e-01]]\n",
            "============ Î£ ============\n",
            "[56.72932437  7.50531949  1.32870503]\n",
            "============ V ============\n",
            "[[ 0.32227446 -0.94643927 -0.01979594]\n",
            " [-0.94663181 -0.32208343 -0.01226742]\n",
            " [ 0.00523443  0.02269294 -0.99972878]]\n",
            "============ Q ============\n",
            "[[-0.34605467  0.93811058  0.0139534 ]\n",
            " [ 0.91935908  0.33609587  0.2044956 ]\n",
            " [ 0.18714981  0.08359485 -0.97876803]]\n",
            "0.0\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5vXHWnRfhMuY",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        ""
      ],
      "execution_count": 0,
      "outputs": []
    }
  ]
}